sourceSets {
    functionalTest
}

configurations {
    functionalTestImplementation {
        extendsFrom(testImplementation)
    }
}

def functionalTest = tasks.register("functionalTest", Test) {
    inputs.files(configurations.testCompileClasspath)
    inputs.files(configurations.testAnnotationProcessor)
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    doFirst {
        systemProperty("testapp.compile.classpath", configurations.testCompileClasspath.asPath)
        systemProperty("testapp.annotationprocessor.path", configurations.testAnnotationProcessor.asPath)
    }
}

tasks.named("check") {
    dependsOn functionalTest
}

dependencies {
    api project(":inject")
    api project(':aop')
    api libs.managed.groovy
    implementation(libs.slf4j.simple)

//    testImplementation 'javax.validation:validation-api:1.1.0.Final'
    testImplementation project(":context")
    testImplementation libs.javax.inject
    testImplementation libs.managed.spotbugs
    testImplementation libs.hibernate
    testImplementation libs.hibernate.validator
    testRuntimeOnly libs.javax.el.impl
    testRuntimeOnly libs.javax.el
    testImplementation project(":http-server-netty")
    testImplementation project(":http-client")
    testImplementation project(":inject-test-utils")
    testImplementation project(":inject-groovy-test")
    testImplementation project(":validation")
    testImplementation(libs.managed.neo4j.bolt) {
        version {
            require "1.4.5"
        }
    }
    testImplementation libs.managed.groovy.json
    testImplementation libs.blaze.persistence.core

    testImplementation(libs.managed.micronaut.test.core) {
        exclude module:'micronaut-runtime'
        exclude module:'micronaut-inject'
        exclude module:'micronaut-bom'
    }

    testImplementation libs.managed.reactor

    functionalTestImplementation(testFixtures(project(":test-suite")))
}

test {
    exclude '**/*$_closure*'
}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
//compileGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
